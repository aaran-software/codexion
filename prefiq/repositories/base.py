from __future__ import annotations
from typing import Protocol, Any, Optional, Sequence, runtime_checkable

@runtime_checkable
class SupportsAsyncDB(Protocol):
    async def execute(self, query: str, params: Optional[tuple] = None) -> None: ...
    async def fetchone(self, query: str, params: Optional[tuple] = None) -> Any: ...
    async def fetchall(self, query: str, params: Optional[tuple] = None) -> list[Any]: ...
    async def executemany(self, query: str, param_list: Sequence[tuple]) -> None: ...
    # Optional but nice:
    async def transaction(self): ...  # async context manager

@runtime_checkable
class SupportsSyncDB(Protocol):
    def execute(self, query: str, params: Optional[tuple] = None) -> None: ...
    def fetchone(self, query: str, params: Optional[tuple] = None) -> Any: ...
    def fetchall(self, query: str, params: Optional[tuple] = None) -> list[Any]: ...
    def executemany(self, query: str, param_list: Sequence[tuple]) -> None: ...
    # Optional helper:
    def transaction(self): ...  # context manager
